definitions:
  model.Category:
    properties:
      description:
        type: string
      id:
        type: integer
      priority:
        type: integer
      status:
        type: boolean
    type: object
  model.Person:
    properties:
      dateChange:
        description: o * permite vim nulo
        type: string
      document:
        type: string
      email:
        type: string
      id:
        type: integer
      isAPhysicalPerson:
        type: boolean
      name:
        type: string
      password:
        type: string
      registrationDate:
        type: string
      userType:
        $ref: '#/definitions/model.UserType'
    type: object
  model.Product:
    properties:
      categoryId:
        type: integer
      dateChange:
        type: string
      description:
        type: string
      id:
        type: integer
      price:
        type: number
      priority:
        type: integer
      quantity:
        type: number
      registrationDate:
        description: o * permite vim nulo
        type: string
      status:
        type: boolean
    type: object
  model.Response:
    properties:
      message:
        type: string
    type: object
  model.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.UserType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Admin
    - Manager
    - Employee
info:
  contact: {}
  description: This is a RESTful API in Go using Swagger
  title: GROCERY API
  version: "1.0"
paths:
  /auth/authorization:
    post:
      description: Generate token JWT
      parameters:
      - description: Dados para login
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserLogin'
        "400":
          description: Erro de validação nos dados
          schema:
            $ref: '#/definitions/model.Response'
        "406":
          description: Erro de validação nos dados
          schema:
            $ref: '#/definitions/model.Response'
      summary: Generate token JWT
      tags:
      - Authorization
  /auth/register:
    post:
      description: Save a person
      parameters:
      - description: Dados do novo usuario
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "400":
          description: Erro de validação nos dados
          schema:
            $ref: '#/definitions/model.Response'
      summary: Save a person
      tags:
      - Authorization
  /categories:
    get:
      description: Returns all categories available in the system.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      security:
      - BearerAuth: []
      summary: List all categories
      tags:
      - Category
  /category:
    post:
      description: Create a new category
      parameters:
      - description: Dados da nova categoria
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Category
  /category/{id}:
    delete:
      description: Deletes the specified category
      parameters:
      - description: ID da Categoria
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delatado com sucesso
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - Category
    get:
      description: Returns the specified category
      parameters:
      - description: ID of Category
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      security:
      - BearerAuth: []
      summary: List the category by id
      tags:
      - Category
  /category/change-status/{id}:
    put:
      description: Change the status of a category
      parameters:
      - description: ID da Categoria
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      security:
      - BearerAuth: []
      summary: Change the status of a category
      tags:
      - Category
  /product:
    post:
      description: Save a product
      parameters:
      - description: Dados do novo produto
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Erro de validação nos dados
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - BearerAuth: []
      summary: Save a product
      tags:
      - Product
    put:
      description: Save a product
      parameters:
      - description: Dados do produto existente
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Erro de validação nos dados
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - BearerAuth: []
      summary: Save a product
      tags:
      - Product
  /product/{id}:
    delete:
      description: Deletes the specified product
      parameters:
      - description: ID of product
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delatado com sucesso
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Product
    get:
      description: Returns the specified product
      parameters:
      - description: ID of Product
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Erro de validação nos dados
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - BearerAuth: []
      summary: list product by id
      tags:
      - Product
  /products:
    get:
      description: Returns all active products or not
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
      security:
      - BearerAuth: []
      summary: list all products
      tags:
      - Product
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
